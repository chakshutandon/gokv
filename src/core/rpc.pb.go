// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc.proto

/*
Package main is a generated protocol buffer package.

It is generated from these files:
	rpc.proto

It has these top-level messages:
	ReadKVRequest
	ReadKVResponse
	WriteKVRequest
	WriteKVResponse
*/
package main

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ReadKVRequest struct {
	Key string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
}

func (m *ReadKVRequest) Reset()                    { *m = ReadKVRequest{} }
func (m *ReadKVRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadKVRequest) ProtoMessage()               {}
func (*ReadKVRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ReadKVRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type ReadKVResponse struct {
	Success bool   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Key     string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
	Value   string `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
}

func (m *ReadKVResponse) Reset()                    { *m = ReadKVResponse{} }
func (m *ReadKVResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadKVResponse) ProtoMessage()               {}
func (*ReadKVResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ReadKVResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *ReadKVResponse) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *ReadKVResponse) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type WriteKVRequest struct {
	Key   string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *WriteKVRequest) Reset()                    { *m = WriteKVRequest{} }
func (m *WriteKVRequest) String() string            { return proto.CompactTextString(m) }
func (*WriteKVRequest) ProtoMessage()               {}
func (*WriteKVRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *WriteKVRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *WriteKVRequest) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type WriteKVResponse struct {
	Success bool   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Key     string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
}

func (m *WriteKVResponse) Reset()                    { *m = WriteKVResponse{} }
func (m *WriteKVResponse) String() string            { return proto.CompactTextString(m) }
func (*WriteKVResponse) ProtoMessage()               {}
func (*WriteKVResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *WriteKVResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *WriteKVResponse) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func init() {
	proto.RegisterType((*ReadKVRequest)(nil), "main.ReadKVRequest")
	proto.RegisterType((*ReadKVResponse)(nil), "main.ReadKVResponse")
	proto.RegisterType((*WriteKVRequest)(nil), "main.WriteKVRequest")
	proto.RegisterType((*WriteKVResponse)(nil), "main.WriteKVResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GoKV service

type GoKVClient interface {
	ReadKVRPC(ctx context.Context, in *ReadKVRequest, opts ...grpc.CallOption) (*ReadKVResponse, error)
	WriteKVRPC(ctx context.Context, in *WriteKVRequest, opts ...grpc.CallOption) (*WriteKVResponse, error)
}

type goKVClient struct {
	cc *grpc.ClientConn
}

func NewGoKVClient(cc *grpc.ClientConn) GoKVClient {
	return &goKVClient{cc}
}

func (c *goKVClient) ReadKVRPC(ctx context.Context, in *ReadKVRequest, opts ...grpc.CallOption) (*ReadKVResponse, error) {
	out := new(ReadKVResponse)
	err := grpc.Invoke(ctx, "/main.GoKV/ReadKVRPC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goKVClient) WriteKVRPC(ctx context.Context, in *WriteKVRequest, opts ...grpc.CallOption) (*WriteKVResponse, error) {
	out := new(WriteKVResponse)
	err := grpc.Invoke(ctx, "/main.GoKV/WriteKVRPC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GoKV service

type GoKVServer interface {
	ReadKVRPC(context.Context, *ReadKVRequest) (*ReadKVResponse, error)
	WriteKVRPC(context.Context, *WriteKVRequest) (*WriteKVResponse, error)
}

func RegisterGoKVServer(s *grpc.Server, srv GoKVServer) {
	s.RegisterService(&_GoKV_serviceDesc, srv)
}

func _GoKV_ReadKVRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadKVRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoKVServer).ReadKVRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.GoKV/ReadKVRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoKVServer).ReadKVRPC(ctx, req.(*ReadKVRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoKV_WriteKVRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteKVRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoKVServer).WriteKVRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.GoKV/WriteKVRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoKVServer).WriteKVRPC(ctx, req.(*WriteKVRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GoKV_serviceDesc = grpc.ServiceDesc{
	ServiceName: "main.GoKV",
	HandlerType: (*GoKVServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadKVRPC",
			Handler:    _GoKV_ReadKVRPC_Handler,
		},
		{
			MethodName: "WriteKVRPC",
			Handler:    _GoKV_WriteKVRPC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 205 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2c, 0x2a, 0x48, 0xd6,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xc9, 0x4d, 0xcc, 0xcc, 0x53, 0x52, 0xe4, 0xe2, 0x0d,
	0x4a, 0x4d, 0x4c, 0xf1, 0x0e, 0x0b, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x12, 0xe0, 0x62,
	0xce, 0x4e, 0xad, 0x94, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0x31, 0x95, 0x82, 0xb8, 0xf8,
	0x60, 0x4a, 0x8a, 0x0b, 0xf2, 0xf3, 0x8a, 0x53, 0x85, 0x24, 0xb8, 0xd8, 0x8b, 0x4b, 0x93, 0x93,
	0x53, 0x8b, 0x8b, 0xc1, 0xea, 0x38, 0x82, 0x60, 0x5c, 0x98, 0x6e, 0x26, 0xb8, 0x6e, 0x21, 0x11,
	0x2e, 0xd6, 0xb2, 0xc4, 0x9c, 0xd2, 0x54, 0x09, 0x66, 0xb0, 0x18, 0x84, 0xa3, 0x64, 0xc1, 0xc5,
	0x17, 0x5e, 0x94, 0x59, 0x92, 0x8a, 0xc7, 0x5e, 0x84, 0x4e, 0x26, 0x64, 0x9d, 0xb6, 0x5c, 0xfc,
	0x70, 0x9d, 0xa4, 0x3b, 0xc7, 0xa8, 0x96, 0x8b, 0xc5, 0x3d, 0xdf, 0x3b, 0x4c, 0xc8, 0x82, 0x8b,
	0x13, 0xea, 0xa9, 0x00, 0x67, 0x21, 0x61, 0x3d, 0x50, 0x58, 0xe8, 0xa1, 0x04, 0x84, 0x94, 0x08,
	0xaa, 0x20, 0xc4, 0x2e, 0x25, 0x06, 0x21, 0x6b, 0x2e, 0x2e, 0x98, 0x03, 0x02, 0x9c, 0x85, 0xa0,
	0xaa, 0x50, 0x3d, 0x23, 0x25, 0x8a, 0x26, 0x0a, 0xd3, 0x9c, 0xc4, 0x06, 0x0e, 0x7b, 0x63, 0x40,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xb5, 0x96, 0xeb, 0xc5, 0x88, 0x01, 0x00, 0x00,
}
